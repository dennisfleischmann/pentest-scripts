import socket
import sys
import concurrent.futures

def scan_port(ip, port):
    """
    Attempts to connect to the specified IP address and port.
    If the connection is successful, the port is considered open.
    """
    try:
        # Create a socket object
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Set a timeout
        sock.settimeout(0.5)
        # Attempt to connect to the IP and port
        result = sock.connect_ex((ip, port))
        if result == 0:
            print(f"Port {port} is open on {ip}.")
        sock.close()
    except socket.error as err:
        print(f"Error on port {port}: {err}")

def scan_ports(ip, start_port, end_port):
    """
    Scans ports in the specified range for the given IP address
    using multiple threads to increase speed.
    """
    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        # Create a range of ports to scan
        ports = [port for port in range(start_port, end_port + 1)]
        # Submit tasks to the executor to scan ports in parallel
        futures = [executor.submit(scan_port, ip, port) for port in ports]
        # Wait for all futures to complete (not strictly necessary here since we don't need to process results)
        concurrent.futures.wait(futures, return_when=concurrent.futures.ALL_COMPLETED)

if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("Usage: python script.py <IP> <Start_Port> <End_Port>")
        sys.exit()

    target_ip = sys.argv[1]
    start_port = int(sys.argv[2])
    end_port = int(sys.argv[3])

    scan_ports(target_ip, start_port, end_port)
